# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug_android-arm
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

ifeq ($(origin CC), default)
  CC = clang
endif
ifeq ($(origin CXX), default)
  CXX = clang++
endif
ifeq ($(origin AR), default)
  AR = ar
endif
DEFINES +=
INCLUDES += -I../include -I../3rdparty
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LDDEPS +=
LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug_android-arm)
TARGETDIR = bin/Android-Arm/Debug
TARGET = $(TARGETDIR)/libcommon.a
OBJDIR = obj/Android-Arm/Debug/common
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g
LIBS += -lm -lpthread
ALL_LDFLAGS += $(LDFLAGS)

else ifeq ($(config),debug_win32)
TARGETDIR = bin/Win32/Debug
TARGET = $(TARGETDIR)/libcommon.a
OBJDIR = obj/Win32/Debug/common
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g
LIBS += -lm -lpthread
ALL_LDFLAGS += $(LDFLAGS)

else ifeq ($(config),debug_win64)
TARGETDIR = bin/Win64/Debug
TARGET = $(TARGETDIR)/libcommon.a
OBJDIR = obj/Win64/Debug/common
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -fomit-frame-pointer -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -fomit-frame-pointer -g
LIBS += -lm -lpthread
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64

else ifeq ($(config),debug_linux32)
TARGETDIR = bin/Linux32/Debug
TARGET = $(TARGETDIR)/libcommon.a
OBJDIR = obj/Linux32/Debug/common
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g -std=gnu11 -Wall -Wextra -Wundef -msse2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g -Wall -Wextra -Wundef -msse2
LIBS += -ldl -lm -lpthread
ALL_LDFLAGS += $(LDFLAGS) -rdynamic

else ifeq ($(config),debug_linux64)
TARGETDIR = bin/Linux64/Debug
TARGET = $(TARGETDIR)/libcommon.a
OBJDIR = obj/Linux64/Debug/common
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g -std=gnu11 -Wall -Wextra -Wundef -msse2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g -Wall -Wextra -Wundef -msse2
LIBS += -ldl -lm -lpthread
ALL_LDFLAGS += $(LDFLAGS) -rdynamic

else ifeq ($(config),release_android-arm)
TARGETDIR = bin/Android-Arm/Release
TARGET = $(TARGETDIR)/libcommon.a
OBJDIR = obj/Android-Arm/Release/common
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g
LIBS += -lm -lpthread
ALL_LDFLAGS += $(LDFLAGS)

else ifeq ($(config),release_win32)
TARGETDIR = bin/Win32/Release
TARGET = $(TARGETDIR)/libcommon.a
OBJDIR = obj/Win32/Release/common
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g
LIBS += -lm -lpthread
ALL_LDFLAGS += $(LDFLAGS)

else ifeq ($(config),release_win64)
TARGETDIR = bin/Win64/Release
TARGET = $(TARGETDIR)/libcommon.a
OBJDIR = obj/Win64/Release/common
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -fomit-frame-pointer -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -fomit-frame-pointer -g
LIBS += -lm -lpthread
ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64

else ifeq ($(config),release_linux32)
TARGETDIR = bin/Linux32/Release
TARGET = $(TARGETDIR)/libcommon.a
OBJDIR = obj/Linux32/Release/common
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g -std=gnu11 -Wall -Wextra -Wundef -msse2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g -Wall -Wextra -Wundef -msse2
LIBS += -ldl -lm -lpthread
ALL_LDFLAGS += $(LDFLAGS) -rdynamic

else ifeq ($(config),release_linux64)
TARGETDIR = bin/Linux64/Release
TARGET = $(TARGETDIR)/libcommon.a
OBJDIR = obj/Linux64/Release/common
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g -std=gnu11 -Wall -Wextra -Wundef -msse2
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -fomit-frame-pointer -g -Wall -Wextra -Wundef -msse2
LIBS += -ldl -lm -lpthread
ALL_LDFLAGS += $(LDFLAGS) -rdynamic

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/http.o
GENERATED += $(OBJDIR)/url.o
OBJECTS += $(OBJDIR)/http.o
OBJECTS += $(OBJDIR)/url.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking common
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning common
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) rmdir /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CC) -x c-header $(ALL_CFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/http.o: ../src/http.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/url.o: ../src/url.c
	@echo $(notdir $<)
	$(SILENT) $(CC) $(ALL_CFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif